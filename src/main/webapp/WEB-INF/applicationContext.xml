<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.2.xsd">
	
	<!-- Allow to read credentials from properties file -->
			
	<!-- Simple implementation of the standard JDBC DataSource interface, configuring 	the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/cs5220" />
		<property name="username" value="postgres" />
		<property name="password" value="woaicy1221" />
		<property name="initialSize" value="1" />		
	</bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="FormGenerator" />
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<context:annotation-config />
	 
	 <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; such as when @Transactional methods are invoked -->
    <tx:annotation-driven />


    <tx:annotation-driven />

    <context:component-scan base-package="formgenerator.model" />
    
    <!-- Spring Security Configuration -->
    
    <security:authentication-manager>
        <security:authentication-provider>
        	<security:password-encoder hash="bcrypt"/>
            <security:jdbc-user-service data-source-ref="dataSource" 
            	users-by-username-query="select username, password, enabled from Members where username=?"
                authorities-by-username-query="select m.username, p.name from Members m, Roles p where m.username=? and m.roles_role_id=p.role_id"/>        	
        </security:authentication-provider>
        
    </security:authentication-manager>
    
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/**" access="authenticated" />	
        <security:intercept-url pattern="/member/delete.html" access="hasAuthority('Admin')" />
        <security:intercept-url pattern="/member/add.html" access="hasAuthority('Admin')" />
    </security:http>
    
    <security:global-method-security pre-post-annotations="enabled" />  

</beans>